package version_5;

import java.util.List;

/**
 * Interface for the methods a question needs to have.
 * 
 * @author JamesBeetham
 *
 */
public interface IQuestion extends Comparable<IQuestion> {

	/**
	 * Returns the stored stats for this qustion.
	 * 
	 * @return List of stored stats for this question
	 */
	public List<Stat> getStats();

	/**
	 * Uses Engine e to ask a question, get an answer, and record the statistic.
	 * 
	 * @param e
	 *            engine to use
	 */
	public void ask(IEngine e);

	/**
	 * Generates list of keywords from the class name, content, and other
	 * things.
	 * 
	 * @return array of strings of keywords that should link back to this
	 *         question.
	 */
	public String[] getKeywords();

	/**
	 * Returns a string representation of all information stored in this
	 * question. This is the string to be used in a question constructor that
	 * will generate this same question using the parser in the constructor of
	 * this class.
	 * 
	 * @return String representation of this
	 */
	public String getString();

	/**
	 * Returns stored time this should be asked. This number can be generated by
	 * the question or can be set by an external Analyzer wherever the program
	 * is controlled from.
	 * 
	 * @return time of which to ask this question.
	 */
	public long getNextTime();

	/**
	 * If the question needs an Analyzer to set the time, uses this to set it.
	 * 
	 * @param time
	 *            time this should next be asked such that when
	 *            System.currentTimeMillis() == time, the question should be
	 *            asked again or will drop below specified predicted percent for
	 *            remembering
	 */
	public void setNextTime(long time);

	/**
	 * Is the same as String.split(String regex) except trims all the values
	 * (useful for parsing Strings in questions).
	 * 
	 * @param str
	 *            String to split
	 * @param regex
	 *            regex to use while splitting String str
	 * @return Array of Strings that have all been trimmed
	 */
	public static String[] trimSplit(String str, String regex) {
		String[] arr = str.split(regex);
		for (int i = 0; i < arr.length; i++)
			arr[i] = arr[i].trim();
		return arr;
	}
}
